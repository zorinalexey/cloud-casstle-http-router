includes:
    - phpstan-baseline.neon
includes:
    - vendor/phpstan/phpstan-strict-rules/rules.neon
    - vendor/phpstan/phpstan-deprecation-rules/rules.neon

parameters:
    level: max
    paths:
        - src
        - tests
    
    checkMissingIterableValueType: false
    checkGenericClassInNonGenericObjectType: false
    checkMissingCallableSignature: false
    checkUninitializedProperties: true
    checkTooWideReturnTypesInProtectedAndPublicMethods: false
    checkImplicitMixed: false
    
    ignoreErrors:
        # PHPUnit assertions in tests
        -
            message: '#^Dynamic call to static method PHPUnit\\Framework\\Assert::#'
            path: tests/*
        # PHPUnit properties initialized in setUp
        -
            message: '#^Class .+ has an uninitialized property .+\. Give it default value or assign it in the constructor\.$#'
            path: tests/*
        # Callable signatures
        - '#has parameter \$\w+ with no signature specified for (Closure|callable)#'
        - '#type has no signature specified for callable#'
        - '#return type has no signature specified for callable#'
        # in_array strict parameter
        - '#Call to function in_array\(\) requires parameter \#3 to be set#'
        # ReflectionType methods (PHP 8+ compatibility)
        - '#Call to an undefined method ReflectionType::(isBuiltin|getName)\(\)#'
        - '#Only booleans are allowed in (&&|\|\|), ReflectionType\|null given#'
        # Empty construct
        - '#Construct empty\(\) is not allowed#'
        # Mixed types in tests
        -
            message: '#Cannot call method .* on mixed#'
            path: tests/*
        -
            message: '#Cannot access offset .* on mixed#'
            path: tests/*
        -
            message: '#Parameter .* expects .*, mixed given#'
            path: tests/*
        -
            message: '#Part .* of encapsed string cannot be cast to string#'
            path: tests/*
        -
            message: '#expects .*, string\|false given#'
            path: tests/*
        # Middleware signatures (by design)
        - '#Parameter \#1 \$middleware of method .+::middleware\(\) expects .+, .+ given#'
    
    excludePaths:
        - vendor
        - build
        - coverage

