#!/usr/bin/env python3
"""
–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–¥–∞ –∏ —Ç–∞–±–ª–∏—Ü.
"""

import re
from pathlib import Path

# –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤
EN_DICT = {
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤': 'Automatic Route Naming',
    '–ü–æ–ª–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º': 'Complete Features Guide',
    '–°–≤–æ–¥–∫–∞ –ø–æ –≤—Å–µ–º —Ç–µ—Å—Ç–∞–º': 'All Tests Summary',
    '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å': 'Getting Started with',
    '–õ—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏': 'Best Practices',
    '–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏': 'Detailed Comparison with Competitors',
    
    # –°–µ–∫—Ü–∏–∏
    '## üìö –û–±–∑–æ—Ä': '## üìö Overview',
    '## üéØ –ó–∞—á–µ–º –Ω—É–∂–Ω–æ': '## üéØ Why',
    '## üí° –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç': '## üí° How It Works',
    '## ‚ö° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞': '## ‚ö° Advantages',
    '## üÜö –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞–º–∏': '## üÜö Comparison with Competitors',
    '## üìä –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è': '## üìä Usage Examples',
    '## ‚úÖ –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å': '## ‚úÖ When to Use',
    '## ‚ùå –ö–æ–≥–¥–∞ –ù–ï –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å': '## ‚ùå When NOT to Use',
    '## üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞': '## üîß Configuration',
    '## üìñ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ': '## üìñ Conclusion',
    '## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏': '## üí° Recommendations',
    '### –û–ø–∏—Å–∞–Ω–∏–µ': '### Description',
    '### –ü—Ä–∏–º–µ—Ä': '### Example',
    '### –ü—Ä–∏–º–µ—Ä—ã': '### Examples',
    '### –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ': '### Usage',
    '### –ü—Ä–æ–±–ª–µ–º–∞ –±–µ–∑': '### The Problem Without',
    '### –†–µ—à–µ–Ω–∏–µ —Å': '### Solution With',
    '### –ê–ª–≥–æ—Ä–∏—Ç–º': '### Algorithm',
    
    # –§—Ä–∞–∑—ã
    '—É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Ñ–∏—á–∞': 'unique feature',
    '—É–Ω–∏–∫–∞–ª—å–Ω–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å': 'unique capability',
    '–∫–æ—Ç–æ—Ä–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏': 'that automatically',
    '–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º–µ–Ω–∞ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤': 'generates names for routes',
    '–Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö URI –∏ HTTP –º–µ—Ç–æ–¥–∞': 'based on their URI and HTTP method',
    '–Ω–∞ –æ—Å–Ω–æ–≤–µ': 'based on',
    '–≠–∫–æ–Ω–æ–º–∏—Ç –≤—Ä–µ–º—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏': 'Saves development time',
    '–≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏': 'Time savings',
    '–£—Å—Ç—Ä–∞–Ω—è–µ—Ç –æ—à–∏–±–∫–∏': 'Eliminates errors',
    '–£–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å': 'Improves readability',
    '–ë–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞': 'Without additional code',
    '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏': 'Automatically',
    '–í—Ä—É—á–Ω—É—é': 'Manually',
    '–ö–∞–∂–¥—ã–π –º–∞—Ä—à—Ä—É—Ç': 'Each route',
    '—Ç—Ä–µ–±—É–µ—Ç —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è': 'requires explicit specification',
    '–†–æ—É—Ç–µ—Ä —Å–∞–º –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç': 'Router automatically generates',
    '–≤ –±–æ–ª—å—à–∏—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö': 'in large projects',
    '–ù—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é': 'Need to manually',
    '–†–∏—Å–∫ –æ—à–∏–±–æ–∫': 'Risk of errors',
    '–¢–æ–ª—å–∫–æ –¥–ª—è': 'Only for',
    '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è': 'Perfect for',
    '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è': 'Use for',
    '–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è': 'Not recommended for',
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏—è
    '–ü–æ–¥–¥–µ—Ä–∂–∫–∞': 'Support',
    '–ù–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è': 'Not supported',
    '–¢–æ–ª—å–∫–æ –≤—Ä—É—á–Ω—É—é': 'Manual only',
    '–ß–∞—Å—Ç–∏—á–Ω–æ': 'Partial',
    '–ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞': 'Full support',
    '–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞': 'Limited support',
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ
    '–®–∞–≥–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞': 'Algorithm Steps',
    '–ë–µ—Ä—ë—Ç URI': 'Takes URI',
    '–£–¥–∞–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã': 'Removes parameters',
    '–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –ø—É—Ç—å': 'Normalizes path',
    '–î–æ–±–∞–≤–ª—è–µ—Ç HTTP –º–µ—Ç–æ–¥': 'Adds HTTP method',
    '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–º—è': 'Generates name',
    
    # –û–±—â–µ–µ
    '–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ': 'Last updated',
    '–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ': 'Table of Contents',
    '–ì–ª–∞–≤–Ω–∞—è': 'Home',
    '–ò—Ç–æ–≥–æ': 'Total',
    '–í—Å–µ–≥–æ': 'Total',
    '–°—Ç–∞—Ç—É—Å': 'Status',
    '–†–µ–∑—É–ª—å—Ç–∞—Ç': 'Result',
    '–ö–∞—Ç–µ–≥–æ—Ä–∏—è': 'Category',
    '–ü–∞—Ä–∞–º–µ—Ç—Ä': 'Parameter',
    '–ó–Ω–∞—á–µ–Ω–∏–µ': 'Value',
    '–¢–µ—Å—Ç': 'Test',
    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': 'Count',
}

def deep_translate(text):
    """–ì–ª—É–±–æ–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞."""
    result = text
    
    # –°–Ω–∞—á–∞–ª–∞ –¥–ª–∏–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
    sorted_dict = sorted(EN_DICT.items(), key=lambda x: len(x[0]), reverse=True)
    
    for ru, en in sorted_dict:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º word boundaries –≥–¥–µ –≤–æ–∑–º–æ–∂–Ω–æ
        result = re.sub(r'\b' + re.escape(ru) + r'\b', en, result, flags=re.IGNORECASE)
        # –¢–∞–∫–∂–µ –ø—Ä–æ—Å—Ç–æ replace –¥–ª—è —Ñ—Ä–∞–∑ —Å –ø—É–Ω–∫—Ç—É–∞—Ü–∏–µ–π
        result = result.replace(ru, en)
    
    return result

def process_file(source_path, target_path):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω —Ñ–∞–π–ª."""
    with open(source_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    lines = content.split('\n')
    result_lines = []
    in_code = False
    
    for i, line in enumerate(lines):
        # Code blocks
        if line.strip().startswith('```'):
            in_code = not in_code
            result_lines.append(line)
            continue
        
        if in_code:
            result_lines.append(line)
            continue
        
        # –¢–∞–±–ª–∏—Ü—ã - –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if line.strip().startswith('|') and line.strip().endswith('|'):
            if i + 1 < len(lines) and '|:---' in lines[i + 1]:
                # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã - –ø–µ—Ä–µ–≤–æ–¥–∏–º
                result_lines.append(deep_translate(line))
            else:
                # –î–∞–Ω–Ω—ã–µ - –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏–º
                result_lines.append(line)
            continue
        
        # –û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç - –ø–µ—Ä–µ–≤–æ–¥–∏–º
        result_lines.append(deep_translate(line))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    with open(target_path, 'w', encoding='utf-8') as f:
        f.write('\n'.join(result_lines))

print("–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω. –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.")
