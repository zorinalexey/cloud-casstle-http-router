#!/usr/bin/env php
<?php

declare(strict_types = 1);

/**
 * Router CLI tool
 */

// Check if composer autoload exists
$autoloadPaths = [
    __DIR__ . '/../vendor/autoload.php',
    __DIR__ . '/../../../autoload.php',
];

$autoloadFound = false;
foreach ($autoloadPaths as $autoloadPath) {
    if (file_exists($autoloadPath)) {
        require_once $autoloadPath;
        $autoloadFound = true;
        break;
    }
}

if (!$autoloadFound) {
    fwrite(STDERR, "Error: Composer autoload file not found.\n");
    fwrite(STDERR, "Please run 'composer install' first.\n");
    exit(1);
}

use CloudCastle\Http\Router\RouteCache;
use CloudCastle\Http\Router\Router;

// Parse command line arguments
$command = $argv[1] ?? 'help';
$options = array_slice($argv, 2);

function showHelp (): void
{
    echo <<<HELP
CloudCastle HTTP Router CLI Tool

Usage:
  router <command> [options]

Commands:
  compile <routes-file> [cache-dir]  Compile routes from file
  clear <cache-dir>                   Clear route cache
  info <cache-file>                   Show cache information
  help                                Show this help message

Examples:
  router compile routes.php ./cache
  router clear ./cache
  router info ./cache/routes.cache.php

HELP;
}

function compile (array $options): void
{
    if (empty($options[0])) {
        fwrite(STDERR, "Error: Routes file path is required.\n");
        fwrite(STDERR, "Usage: router compile <routes-file> [cache-dir]\n");
        exit(1);
    }
    
    $routesFile = $options[0];
    $cacheDir = $options[1] ?? './cache';
    
    if (!file_exists($routesFile)) {
        fwrite(STDERR, "Error: Routes file not found: {$routesFile}\n");
        exit(1);
    }
    
    echo "Loading routes from: {$routesFile}\n";
    
    // Create router instance
    $router = new Router();
    $router->enableCache($cacheDir);
    
    // Load routes from file
    $routesLoader = require $routesFile;
    if (is_callable($routesLoader)) {
        $routesLoader($router);
    }
    
    // Compile routes
    echo "Compiling routes...\n";
    $success = $router->compile(true);
    
    if ($success) {
        $cache = $router->getCache();
        $cacheFile = $cache ? $cache->getCacheFile() : 'unknown';
        echo "✓ Routes compiled successfully!\n";
        echo "Cache file: {$cacheFile}\n";
        echo "Total routes: " . count($router->getRoutes()) . "\n";
    } else {
        fwrite(STDERR, "✗ Failed to compile routes.\n");
        exit(1);
    }
}

function clearCache (array $options): void
{
    $cacheDir = $options[0] ?? './cache';
    
    echo "Clearing cache from: {$cacheDir}\n";
    
    $cache = new RouteCache($cacheDir);
    $success = $cache->clear();
    
    if ($success) {
        echo "✓ Cache cleared successfully!\n";
    } else {
        echo "! Cache was already empty or doesn't exist.\n";
    }
}

function showInfo (array $options): void
{
    if (empty($options[0])) {
        fwrite(STDERR, "Error: Cache file path is required.\n");
        fwrite(STDERR, "Usage: router info <cache-file>\n");
        exit(1);
    }
    
    $cacheFile = $options[0];
    
    if (!file_exists($cacheFile)) {
        fwrite(STDERR, "Error: Cache file not found: {$cacheFile}\n");
        exit(1);
    }
    
    $data = require $cacheFile;
    
    echo "Cache Information\n";
    echo str_repeat("=", 50) . "\n";
    echo "File: {$cacheFile}\n";
    echo sprintf("Size: %s bytes\n", number_format(filesize($cacheFile)));
    echo sprintf("Modified: %s\n", date('Y-m-d H:i:s', filemtime($cacheFile)));
    
    if (isset($data['metadata'])) {
        echo "\nMetadata:\n";
        echo "  Compiled at: " . date('Y-m-d H:i:s', $data['metadata']['compiled_at']) . "\n";
        echo "  Routes count: " . $data['metadata']['routes_count'] . "\n";
    }
    
    if (isset($data['named'])) {
        echo "\nNamed routes: " . count($data['named']) . "\n";
    }
    
    if (isset($data['tagged'])) {
        echo "Tagged routes: " . count($data['tagged']) . " tags\n";
    }
    
    echo "\n";
}

// Execute command
match ($command) {
    'compile' => compile($options),
    'clear' => clearCache($options),
    'info' => showInfo($options),
    'help', '--help', '-h' => showHelp(),
    default => function () use ($command){
        fwrite(STDERR, "Unknown command: {$command}\n\n");
        showHelp();
        exit(1);
    }
};

