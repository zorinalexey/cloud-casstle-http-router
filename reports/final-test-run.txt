> phpunit
PHPUnit 10.5.58 by Sebastian Bergmann and contributors.

Runtime:       PHP 8.4.13
Configuration: /home/alexey/Документы/Projects/Cursor/HttpRouter/phpunit.xml

...................F...........................................  63 / 482 ( 13%)
............................................................... 126 / 482 ( 26%)
....> phpunit tests/Unit --testdox
PHPUnit 10.5.58 by Sebastian Bergmann and contributors.

Runtime:       PHP 8.4.13
Configuration: /home/alexey/Документы/Projects/Cursor/HttpRouter/phpunit.xml

...............................................................  63 / 419 ( 15%)
....> XDEBUG_MODE=coverage phpunit --coverage-html coverage --coverage-text
PHPUnit 10.5.58 by Sebastian Bergmann and contributors.

Runtime:       PHP 8.4.13 with Xdebug 3.4.5
Configuration: /home/alexey/Документы/Projects/Cursor/HttpRouter/phpunit.xml

...................F...........................................  63 / 482 ( 13%)
............................................................... 126 / 482 ( 26%)
....> phpunit tests/Security/SecurityTest.php --testdox
PHPUnit 10.5.58 by Sebastian Bergmann and contributors.

Runtime:       PHP 8.4.13
Configuration: /home/alexey/Документы/Projects/Cursor/HttpRouter/phpunit.xml

.............                                                     13 / 13 (100%)

Time: 00:00.084, Memory: 12.00 MB

Security (CloudCastle\Http\Router\Tests\Security\Security)
 ✔ Path traversal protection
 ✔ Sql injection in parameters
 ✔ Xss in route parameters
 ✔ Ip whitelist security
 ✔ Ip blacklist security
 ✔ Ip spoofing protection
 ✔ Domain security
 ✔ Re do s protection
 ✔ Method override attack
 ✔ Mass assignment in route params
 ✔ Cache injection
 ✔ Resource exhaustion
 ✔ Unicode security issues

OK (13 tests, 38 assertions)
> phpunit tests/Performance/BenchmarkTest.php --testdox
PHPUnit 10.5.58 by Sebastian Bergmann and contributors.

Runtime:       PHP 8.4.13
Configuration: /home/alexey/Документы/Projects/Cursor/HttpRouter/phpunit.xml

.....                                                               5 / 5 (100%)

Time: 00:20.081, Memory: 30.00 MB

Benchmark (CloudCastle\Http\Router\Tests\Performance\Benchmark)
 ✔ Route registration performance
 ✔ Route matching performance
 ✔ Cached route performance
 ✔ Memory usage
 ✔ Group performance

OK (5 tests, 5 assertions)
> php tests/Load/LoadTest.php
===============================================
HTTP Router Load Testing
===============================================

Test 1: Light Load (100 routes, 1,000 requests)
--------------------------------------------------
  Routes registered: 100
  Total requests: 1000
  Duration: 0.0168s
  Requests/sec: 59,649
  Avg response time: 0.02ms
  Memory peak: 6.00 MB

Test 2: Medium Load (500 routes, 5,000 requests)
--------------------------------------------------
  Routes registered: 500
  Total requests: 5000
  Duration: 0.0828s
  Requests/sec: 60,351
  Avg response time: 0.02ms
  Memory peak: 6.00 MB

Test 3: Heavy Load (1,000 routes, 10,000 requests)
--------------------------------------------------
  Routes registered: 1,000
  Total requests: 10000
  Duration: 0.1662s
  Requests/sec: 60,173
  Avg response time: 0.02ms
  Memory peak: 6.00 MB

Test 4: Concurrent Access Patterns
--------------------------------------------------
  Pattern variations: 4
  Total requests: 5000
  Requests/sec: 9,364
  Avg time: 0.11ms

Test 5: Cached vs Uncached Performance
--------------------------------------------------
  Uncached: 60,750 req/sec
  Cached: 63,456 req/sec
  Improvement: 4.3%

===============================================
Summary
===============================================

Light Load:
  59,649 requests/sec
  0.02ms avg response time

Medium Load:
  60,351 requests/sec
  0.02ms avg response time

Heavy Load:
  60,173 requests/sec
  0.02ms avg response time

Test completed successfully!
> php tests/Stress/StressTest.php
===============================================
HTTP Router Stress Testing
===============================================

Test 1: Maximum Routes Capacity
--------------------------------------------------
  10000 routes registered, memory: 14.00 MB
  20000 routes registered, memory: 28.00 MB
  30000 routes registered, memory: 44.00 MB
  40000 routes registered, memory: 60.00 MB
  50000 routes registered, memory: 74.00 MB
  60000 routes registered, memory: 88.00 MB
  70000 routes registered, memory: 106.01 MB
  80000 routes registered, memory: 120.01 MB
  90000 routes registered, memory: 134.01 MB

  Maximum routes handled: 100,000
  Registration time: 3.70s
  Memory used: 150.01 MB
  Per route: 1.54 KB

Test 2: Deep Group Nesting
--------------------------------------------------
  Maximum nesting depth: 50
  Routes created: 1

Test 3: Long URI Patterns
--------------------------------------------------
  URI length: 1980 characters
  Segments: 200
  Registration time: 0.27ms
  Match time: 0.41ms

Test 4: Extreme Request Volume
--------------------------------------------------
  10000 requests processed, 60,164 req/sec
  20000 requests processed, 60,335 req/sec
  30000 requests processed, 60,344 req/sec
  40000 requests processed, 60,392 req/sec
  50000 requests processed, 60,407 req/sec
  60000 requests processed, 60,405 req/sec
  70000 requests processed, 60,454 req/sec
  80000 requests processed, 60,440 req/sec
  90000 requests processed, 60,378 req/sec
  100000 requests processed, 60,335 req/sec
  110000 requests processed, 60,297 req/sec
  120000 requests processed, 60,273 req/sec
  130000 requests processed, 60,249 req/sec
  140000 requests processed, 60,192 req/sec
  150000 requests processed, 60,062 req/sec
  160000 requests processed, 59,712 req/sec
  170000 requests processed, 58,998 req/sec
  180000 requests processed, 58,885 req/sec
  190000 requests processed, 58,924 req/sec

  Total requests: 200,000
  Successful: 200,000
  Errors: 0
  Duration: 3.39s
  Requests/sec: 58,997
  Avg time: 0.0170ms

Test 5: Memory Limit Stress
--------------------------------------------------
  PHP memory limit: 2048M
  Routes: 5000, Memory: 1.99 MB (7.7%)
  Routes: 10000, Memory: 3.99 MB (7.8%)
  Routes: 15000, Memory: 3.99 MB (7.8%)
  Routes: 20000, Memory: 5.99 MB (7.9%)
  Routes: 25000, Memory: 5.99 MB (7.9%)
  Routes: 30000, Memory: 5.99 MB (7.9%)
  Routes: 35000, Memory: 14.49 MB (8.3%)
  Routes: 40000, Memory: 14.49 MB (8.3%)
  Routes: 45000, Memory: 14.49 MB (8.3%)
  Routes: 50000, Memory: 14.49 MB (8.3%)
  Routes: 55000, Memory: 14.49 MB (8.3%)
  Routes: 60000, Memory: 14.49 MB (8.3%)
  Routes: 65000, Memory: 14.49 MB (8.3%)
  Routes: 70000, Memory: 19.01 MB (8.5%)
  Routes: 75000, Memory: 19.01 MB (8.5%)
  Routes: 80000, Memory: 21.01 MB (8.6%)
  Routes: 85000, Memory: 21.01 MB (8.6%)
  Routes: 90000, Memory: 21.01 MB (8.6%)
  Routes: 95000, Memory: 23.01 MB (8.7%)
  Routes: 100000, Memory: 23.01 MB (8.7%)
  Routes: 105000, Memory: 23.01 MB (8.7%)
  Routes: 110000, Memory: 29.01 MB (9.0%)
  Routes: 115000, Memory: 35.01 MB (9.3%)
  Routes: 120000, Memory: 41.01 MB (9.6%)
  Routes: 125000, Memory: 47.01 MB (9.9%)
  Routes: 130000, Memory: 55.01 MB (10.3%)
  Routes: 135000, Memory: 78.01 MB (11.4%)
  Routes: 140000, Memory: 84.01 MB (11.7%)
  Routes: 145000, Memory: 90.01 MB (12.0%)
  Routes: 150000, Memory: 96.01 MB (12.3%)
  Routes: 155000, Memory: 102.01 MB (12.6%)
  Routes: 160000, Memory: 108.01 MB (12.9%)
  Routes: 165000, Memory: 114.01 MB (13.2%)
  Routes: 170000, Memory: 120.01 MB (13.5%)
  Routes: 175000, Memory: 126.01 MB (13.8%)
  Routes: 180000, Memory: 132.01 MB (14.1%)
  Routes: 185000, Memory: 138.01 MB (14.4%)
  Routes: 190000, Memory: 144.01 MB (14.6%)
  Routes: 195000, Memory: 150.01 MB (14.9%)
  Routes: 200000, Memory: 156.01 MB (15.2%)
  Routes: 205000, Memory: 162.01 MB (15.5%)
  Routes: 210000, Memory: 168.01 MB (15.8%)
  Routes: 215000, Memory: 174.01 MB (16.1%)
  Routes: 220000, Memory: 180.01 MB (16.4%)
  Routes: 225000, Memory: 186.01 MB (16.7%)
  Routes: 230000, Memory: 192.01 MB (17.0%)
  Routes: 235000, Memory: 198.01 MB (17.3%)
  Routes: 240000, Memory: 206.01 MB (17.7%)
  Routes: 245000, Memory: 212.01 MB (18.0%)
  Routes: 250000, Memory: 218.01 MB (18.3%)
  Routes: 255000, Memory: 224.01 MB (18.6%)
  Routes: 260000, Memory: 230.01 MB (18.8%)
  Routes: 265000, Memory: 270.01 MB (20.8%)
  Routes: 270000, Memory: 276.01 MB (21.1%)
  Routes: 275000, Memory: 282.01 MB (21.4%)
  Routes: 280000, Memory: 288.01 MB (21.7%)
  Routes: 285000, Memory: 294.01 MB (22.0%)
  Routes: 290000, Memory: 300.01 MB (22.3%)
  Routes: 295000, Memory: 306.01 MB (22.6%)
  Routes: 300000, Memory: 312.01 MB (22.9%)
  Routes: 305000, Memory: 318.01 MB (23.1%)
  Routes: 310000, Memory: 324.01 MB (23.4%)
  Routes: 315000, Memory: 330.01 MB (23.7%)
  Routes: 320000, Memory: 336.01 MB (24.0%)
  Routes: 325000, Memory: 342.01 MB (24.3%)
  Routes: 330000, Memory: 348.01 MB (24.6%)
  Routes: 335000, Memory: 354.01 MB (24.9%)
  Routes: 340000, Memory: 360.01 MB (25.2%)
  Routes: 345000, Memory: 368.01 MB (25.6%)
  Routes: 350000, Memory: 374.01 MB (25.9%)
  Routes: 355000, Memory: 380.01 MB (26.2%)
  Routes: 360000, Memory: 386.01 MB (26.5%)
  Routes: 365000, Memory: 392.01 MB (26.8%)
  Routes: 370000, Memory: 398.01 MB (27.1%)
  Routes: 375000, Memory: 404.01 MB (27.3%)
  Routes: 380000, Memory: 410.01 MB (27.6%)
  Routes: 385000, Memory: 416.01 MB (27.9%)
  Routes: 390000, Memory: 422.01 MB (28.2%)
  Routes: 395000, Memory: 428.01 MB (28.5%)
  Routes: 400000, Memory: 434.01 MB (28.8%)
  Routes: 405000, Memory: 440.01 MB (29.1%)
  Routes: 410000, Memory: 446.01 MB (29.4%)
  Routes: 415000, Memory: 452.01 MB (29.7%)
  Routes: 420000, Memory: 458.01 MB (30.0%)
  Routes: 425000, Memory: 464.01 MB (30.3%)
  Routes: 430000, Memory: 470.01 MB (30.6%)
  Routes: 435000, Memory: 476.01 MB (30.9%)
  Routes: 440000, Memory: 482.01 MB (31.2%)
  Routes: 445000, Memory: 488.01 MB (31.4%)
  Routes: 450000, Memory: 496.01 MB (31.8%)
  Routes: 455000, Memory: 502.01 MB (32.1%)
  Routes: 460000, Memory: 508.01 MB (32.4%)
  Routes: 465000, Memory: 514.01 MB (32.7%)
  Routes: 470000, Memory: 520.01 MB (33.0%)
  Routes: 475000, Memory: 526.01 MB (33.3%)
  Routes: 480000, Memory: 532.01 MB (33.6%)
  Routes: 485000, Memory: 538.01 MB (33.9%)
  Routes: 490000, Memory: 544.01 MB (34.2%)
  Routes: 495000, Memory: 550.01 MB (34.5%)
  Routes: 500000, Memory: 556.01 MB (34.8%)
  Routes: 505000, Memory: 562.01 MB (35.1%)
  Routes: 510000, Memory: 568.01 MB (35.4%)
  Routes: 515000, Memory: 574.01 MB (35.6%)
  Routes: 520000, Memory: 580.01 MB (35.9%)
  Routes: 525000, Memory: 654.01 MB (39.6%)
  Routes: 530000, Memory: 660.01 MB (39.8%)
  Routes: 535000, Memory: 666.01 MB (40.1%)
  Routes: 540000, Memory: 672.01 MB (40.4%)
  Routes: 545000, Memory: 678.01 MB (40.7%)
  Routes: 550000, Memory: 684.01 MB (41.0%)
  Routes: 555000, Memory: 690.01 MB (41.3%)
  Routes: 560000, Memory: 698.01 MB (41.7%)
  Routes: 565000, Memory: 704.01 MB (42.0%)
  Routes: 570000, Memory: 710.01 MB (42.3%)
  Routes: 575000, Memory: 716.01 MB (42.6%)
  Routes: 580000, Memory: 722.01 MB (42.9%)
  Routes: 585000, Memory: 728.01 MB (43.2%)
  Routes: 590000, Memory: 734.01 MB (43.5%)
  Routes: 595000, Memory: 740.01 MB (43.8%)
  Routes: 600000, Memory: 746.01 MB (44.0%)
  Routes: 605000, Memory: 752.01 MB (44.3%)
  Routes: 610000, Memory: 758.01 MB (44.6%)
  Routes: 615000, Memory: 764.01 MB (44.9%)
  Routes: 620000, Memory: 770.01 MB (45.2%)
  Routes: 625000, Memory: 776.01 MB (45.5%)
  Routes: 630000, Memory: 782.01 MB (45.8%)
  Routes: 635000, Memory: 788.01 MB (46.1%)
  Routes: 640000, Memory: 794.01 MB (46.4%)
  Routes: 645000, Memory: 800.01 MB (46.7%)
  Routes: 650000, Memory: 806.01 MB (47.0%)
  Routes: 655000, Memory: 812.01 MB (47.3%)
  Routes: 660000, Memory: 818.01 MB (47.6%)
  Routes: 665000, Memory: 826.01 MB (48.0%)
  Routes: 670000, Memory: 832.01 MB (48.2%)
  Routes: 675000, Memory: 838.01 MB (48.5%)
  Routes: 680000, Memory: 844.01 MB (48.8%)
  Routes: 685000, Memory: 850.01 MB (49.1%)
  Routes: 690000, Memory: 856.01 MB (49.4%)
  Routes: 695000, Memory: 862.01 MB (49.7%)
  Routes: 700000, Memory: 868.01 MB (50.0%)
  Routes: 705000, Memory: 874.01 MB (50.3%)
  Routes: 710000, Memory: 880.01 MB (50.6%)
  Routes: 715000, Memory: 886.01 MB (50.9%)
  Routes: 720000, Memory: 892.01 MB (51.2%)
  Routes: 725000, Memory: 898.01 MB (51.5%)
  Routes: 730000, Memory: 904.01 MB (51.8%)
  Routes: 735000, Memory: 910.01 MB (52.1%)
  Routes: 740000, Memory: 916.01 MB (52.3%)
  Routes: 745000, Memory: 922.01 MB (52.6%)
  Routes: 750000, Memory: 928.01 MB (52.9%)
  Routes: 755000, Memory: 934.01 MB (53.2%)
  Routes: 760000, Memory: 940.01 MB (53.5%)
  Routes: 765000, Memory: 946.01 MB (53.8%)
  Routes: 770000, Memory: 954.01 MB (54.2%)
  Routes: 775000, Memory: 960.01 MB (54.5%)
  Routes: 780000, Memory: 966.01 MB (54.8%)
  Routes: 785000, Memory: 972.01 MB (55.1%)
  Routes: 790000, Memory: 978.01 MB (55.4%)
  Routes: 795000, Memory: 984.01 MB (55.7%)
  Routes: 800000, Memory: 990.01 MB (56.0%)
  Routes: 805000, Memory: 996.01 MB (56.3%)
  Routes: 810000, Memory: 1,002.01 MB (56.5%)
  Routes: 815000, Memory: 1,008.01 MB (56.8%)
  Routes: 820000, Memory: 1,014.01 MB (57.1%)
  Routes: 825000, Memory: 1,020.01 MB (57.4%)
  Routes: 830000, Memory: 1.00 GB (57.7%)
  Routes: 835000, Memory: 1.01 GB (58.0%)
  Routes: 840000, Memory: 1.01 GB (58.3%)
  Routes: 845000, Memory: 1.02 GB (58.6%)
  Routes: 850000, Memory: 1.03 GB (58.9%)
  Routes: 855000, Memory: 1.03 GB (59.2%)
  Routes: 860000, Memory: 1.04 GB (59.5%)
  Routes: 865000, Memory: 1.04 GB (59.8%)
  Routes: 870000, Memory: 1.05 GB (60.1%)
  Routes: 875000, Memory: 1.06 GB (60.5%)
  Routes: 880000, Memory: 1.06 GB (60.7%)
  Routes: 885000, Memory: 1.07 GB (61.0%)
  Routes: 890000, Memory: 1.07 GB (61.3%)
  Routes: 895000, Memory: 1.08 GB (61.6%)
  Routes: 900000, Memory: 1.09 GB (61.9%)
  Routes: 905000, Memory: 1.09 GB (62.2%)
  Routes: 910000, Memory: 1.10 GB (62.5%)
  Routes: 915000, Memory: 1.10 GB (62.8%)
  Routes: 920000, Memory: 1.11 GB (63.1%)
  Routes: 925000, Memory: 1.12 GB (63.4%)
  Routes: 930000, Memory: 1.12 GB (63.7%)
  Routes: 935000, Memory: 1.13 GB (64.0%)
  Routes: 940000, Memory: 1.13 GB (64.3%)
  Routes: 945000, Memory: 1.14 GB (64.6%)
  Routes: 950000, Memory: 1.14 GB (64.8%)
  Routes: 955000, Memory: 1.15 GB (65.1%)
  Routes: 960000, Memory: 1.16 GB (65.4%)
  Routes: 965000, Memory: 1.16 GB (65.7%)
  Routes: 970000, Memory: 1.17 GB (66.0%)
  Routes: 975000, Memory: 1.17 GB (66.3%)
  Routes: 980000, Memory: 1.18 GB (66.6%)
  Routes: 985000, Memory: 1.19 GB (67.0%)
  Routes: 990000, Memory: 1.19 GB (67.3%)
  Routes: 995000, Memory: 1.20 GB (67.6%)
  Routes: 1000000, Memory: 1.21 GB (67.9%)
  Routes: 1005000, Memory: 1.21 GB (68.2%)
  Routes: 1010000, Memory: 1.22 GB (68.5%)
  Routes: 1015000, Memory: 1.22 GB (68.8%)
  Routes: 1020000, Memory: 1.23 GB (69.0%)
  Routes: 1025000, Memory: 1.23 GB (69.3%)
  Routes: 1030000, Memory: 1.24 GB (69.6%)
  Routes: 1035000, Memory: 1.25 GB (69.9%)
  Routes: 1040000, Memory: 1.25 GB (70.2%)
  Routes: 1045000, Memory: 1.26 GB (70.5%)
  Routes: 1050000, Memory: 1.40 GB (77.4%)
  Routes: 1055000, Memory: 1.40 GB (77.7%)
  Routes: 1060000, Memory: 1.41 GB (78.0%)
  Routes: 1065000, Memory: 1.41 GB (78.3%)
  Routes: 1070000, Memory: 1.42 GB (78.6%)
  Routes: 1075000, Memory: 1.43 GB (78.9%)
  Routes: 1080000, Memory: 1.43 GB (79.2%)
  Routes: 1085000, Memory: 1.44 GB (79.5%)
  Routes: 1090000, Memory: 1.45 GB (79.9%)
  Routes: 1095000, Memory: 1.45 GB (80.2%)
  Stopping at 80% memory usage

  Final route count: 1,095,000
  Memory used: 1.45 GB
  Per route: 1.39 KB

> phpstan analyse src tests --level=max
Note: Using configuration file /home/alexey/Документы/Projects/Cursor/HttpRouter/phpstan.neon.
  0/86 [░░░░░░░░░░░░░░░░░░░░░░░░░░░░]   0%[1G[2K 86/86 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%


 [OK] No errors                                                                 

> phpcs src --standard=PSR12
> php-cs-fixer fix --dry-run --diff
PHP CS Fixer 3.88.2 Folding Bike by Fabien Potencier, Dariusz Ruminski and contributors.
PHP runtime: 8.4.13
Running analysis on 1 core sequentially.
You can enable parallel runner and speed up the analysis! Please see https://cs.symfony.com/doc/usage.html for more information.
Loaded config default from "/home/alexey/Документы/Projects/Cursor/HttpRouter/.php-cs-fixer.php".
Using cache file ".php-cs-fixer.cache".
  0/86 [░░░░░░░░░░░░░░░░░░░░░░░░░░░░]   0%
  9/86 [▓▓░░░░░░░░░░░░░░░░░░░░░░░░░░]  10%
 18/86 [▓▓▓▓▓░░░░░░░░░░░░░░░░░░░░░░░]  20%
 26/86 [▓▓▓▓▓▓▓▓░░░░░░░░░░░░░░░░░░░░]  30%
 35/86 [▓▓▓▓▓▓▓▓▓▓▓░░░░░░░░░░░░░░░░░]  40%
 43/86 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░░░░░░░░░]  50%
 52/86 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░░░░░░░]  60%
 61/86 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░░░░]  70%
 69/86 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░░░░]  80%
 78/86 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓░░░]  90%
 86/86 [▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓] 100%

   1) src/Middleware/AuthMiddleware.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/src/Middleware/AuthMiddleware.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/src/Middleware/AuthMiddleware.php
@@ -4,8 +4,8 @@
 
 namespace CloudCastle\Http\Router\Middleware;
 
+use Closure;
 use CloudCastle\Http\Router\Contracts\MiddlewareInterface;
-use Closure;
 use RuntimeException;
 
 /**

      ----------- end diff -----------

   2) src/Middleware/CorsMiddleware.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/src/Middleware/CorsMiddleware.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/src/Middleware/CorsMiddleware.php
@@ -5,7 +5,6 @@
 namespace CloudCastle\Http\Router\Middleware;
 
 use CloudCastle\Http\Router\Contracts\MiddlewareInterface;
-use Closure;
 
 /**
  * CORS (Cross-Origin Resource Sharing) middleware.
@@ -24,13 +23,13 @@
     public function __construct(
         private readonly array $allowedOrigins = ['*'],
         private readonly array $allowedMethods = [
-            'GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH', 'HEAD', 'VIEW', 'CUSTOM'
+            'GET', 'POST', 'PUT', 'DELETE', 'OPTIONS', 'PATCH', 'HEAD', 'VIEW', 'CUSTOM',
         ],
         private readonly array $allowedHeaders = [
             'Content-Type', 'Authorization', 'X-Requested-With',
             'X-CSRF-TOKEN', 'X-XSRF-TOKEN', 'X-XSRF-HEADER',
             'X-XSRF-HEADER-NAME', 'X-XSRF-HEADER-VALUE',
-            'X-XSRF-HEADER-NAME-VALUE'
+            'X-XSRF-HEADER-NAME-VALUE',
         ],
         private readonly int $maxAge = 86400,
         private readonly bool $allowCredentials = false

      ----------- end diff -----------

   3) src/Psr15/Psr15MiddlewareAdapter.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/src/Psr15/Psr15MiddlewareAdapter.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/src/Psr15/Psr15MiddlewareAdapter.php
@@ -4,8 +4,8 @@
 
 namespace CloudCastle\Http\Router\Psr15;
 
+use Closure;
 use CloudCastle\Http\Router\Contracts\MiddlewareInterface;
-use Closure;
 use Psr\Http\Message\ResponseInterface;
 use Psr\Http\Message\ServerRequestInterface;
 use Psr\Http\Server\MiddlewareInterface as PsrMiddlewareInterface;
@@ -16,6 +16,7 @@
  *
  * @SuppressWarnings(PHPMD.LongVariable)
  * @SuppressWarnings(PHPMD.StaticAccess)
+ *
  * @phpcs:disable PSR1.Classes.ClassDeclaration.MultipleClasses
  */
 class Psr15MiddlewareAdapter implements MiddlewareInterface
@@ -41,6 +42,7 @@
             public function handle(ServerRequestInterface $request): ResponseInterface
             {
                 ($this->next)($request->getUri()->getPath());
+
                 return $this->response;
             }
         };
@@ -62,7 +64,7 @@
     {
         $uri = $request->getUri()->getPath();
 
-        $this->middleware->handle($uri, fn(): \Psr\Http\Message\ResponseInterface => $handler->handle($request));
+        $this->middleware->handle($uri, fn (): \Psr\Http\Message\ResponseInterface => $handler->handle($request));
 
         return $handler->handle($request);
     }

      ----------- end diff -----------

   4) src/UrlGenerator.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/src/UrlGenerator.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/src/UrlGenerator.php
@@ -23,6 +23,7 @@
     public function setBaseUrl(string $baseUrl): self
     {
         $this->baseUrl = rtrim($baseUrl, '/');
+
         return $this;
     }
 

      ----------- end diff -----------

   5) src/Loader/YamlLoader.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/src/Loader/YamlLoader.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/src/Loader/YamlLoader.php
@@ -73,7 +73,7 @@
                 $methods = ['GET'];
             }
 
-            $routeName = is_string($name) ? $name : (string)$name;
+            $routeName = is_string($name) ? $name : (string) $name;
             $route = $this->router->match($methods, $path, $action)->name($routeName);
 
             // Apply optional config

      ----------- end diff -----------

   6) src/Loader/AttributeLoader.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/src/Loader/AttributeLoader.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/src/Loader/AttributeLoader.php
@@ -50,6 +50,7 @@
      * @param class-string $controllerClass
      *
      * @throws RuntimeException
+     *
      * @SuppressWarnings(PHPMD.CyclomaticComplexity)
      */
     public function loadFromController(string $controllerClass): void

      ----------- end diff -----------

   7) src/RouteDumper.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/src/RouteDumper.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/src/RouteDumper.php
@@ -46,6 +46,7 @@
     public function dumpJson(): string
     {
         $json = json_encode($this->dump(), JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES);
+
         return $json !== false ? $json : '[]';
     }
 
@@ -83,6 +84,7 @@
         if (is_array($action) && count($action) === 2) {
             [$class, $method] = $action;
             $className = is_string($class) ? $class : $class::class;
+
             return sprintf('%s@%s', $className, $method);
         }
 

      ----------- end diff -----------

   8) src/UrlMatcher.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/src/UrlMatcher.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/src/UrlMatcher.php
@@ -21,9 +21,10 @@
     /**
      * Match URL to a route.
      *
-     * @return array{route: RouteInterface, parameters: array<string, string>}
      *
      * @throws RouteNotFoundException
+     *
+     * @return array{route: RouteInterface, parameters: array<string, string>}
      */
     public function match(string $url, string $method = 'GET'): array
     {
@@ -61,7 +62,7 @@
     {
         $pattern = preg_replace_callback(
             '/\{([a-zA-Z_]\w*)\}/',
-            fn($matches): string => '(?P<' . $matches[1] . '>[^/]+)',
+            fn ($matches): string => '(?P<' . $matches[1] . '>[^/]+)',
             $uri
         );
 
@@ -75,6 +76,7 @@
     {
         try {
             $this->match($url, $method);
+
             return true;
         } catch (RouteNotFoundException) {
             return false;

      ----------- end diff -----------

   9) tests/Unit/RouteConditionsTest.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/RouteConditionsTest.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/RouteConditionsTest.php
@@ -18,7 +18,7 @@
 
     public function testSetCondition(): void
     {
-        $route = $this->router->get('/admin', fn(): string => 'admin')
+        $route = $this->router->get('/admin', fn (): string => 'admin')
             ->condition('role == "admin"');
 
         $this->assertEquals('role == "admin"', $route->getCondition());
@@ -26,7 +26,7 @@
 
     public function testConditionFluentInterface(): void
     {
-        $route = $this->router->get('/test', fn(): string => 'test')
+        $route = $this->router->get('/test', fn (): string => 'test')
             ->condition('age > 18')
             ->name('test')
             ->middleware(['auth']);
@@ -38,7 +38,7 @@
 
     public function testMultipleConditions(): void
     {
-        $route = $this->router->get('/premium', fn(): string => 'premium')
+        $route = $this->router->get('/premium', fn (): string => 'premium')
             ->condition('subscription == "premium" and verified');
 
         $this->assertEquals('subscription == "premium" and verified', $route->getCondition());
@@ -46,7 +46,7 @@
 
     public function testConditionCanBeOverridden(): void
     {
-        $route = $this->router->get('/test', fn(): string => 'test')
+        $route = $this->router->get('/test', fn (): string => 'test')
             ->condition('old condition')
             ->condition('new condition');
 
@@ -55,7 +55,7 @@
 
     public function testNoCondition(): void
     {
-        $route = $this->router->get('/test', fn(): string => 'test');
+        $route = $this->router->get('/test', fn (): string => 'test');
 
         $this->assertNull($route->getCondition());
     }
@@ -62,7 +62,7 @@
 
     public function testComplexCondition(): void
     {
-        $route = $this->router->get('/api', fn(): string => 'api')
+        $route = $this->router->get('/api', fn (): string => 'api')
             ->condition('api_version >= 2 and authenticated and rate_limit < 100');
 
         $this->assertEquals(
@@ -73,7 +73,7 @@
 
     public function testConditionWithOr(): void
     {
-        $route = $this->router->get('/access', fn(): string => 'access')
+        $route = $this->router->get('/access', fn (): string => 'access')
             ->condition('is_admin or is_moderator or is_owner');
 
         $this->assertEquals('is_admin or is_moderator or is_owner', $route->getCondition());
@@ -81,7 +81,7 @@
 
     public function testConditionWithStringComparison(): void
     {
-        $route = $this->router->get('/locale', fn(): string => 'locale')
+        $route = $this->router->get('/locale', fn (): string => 'locale')
             ->condition('locale == "en" or locale == "fr"');
 
         $this->assertEquals('locale == "en" or locale == "fr"', $route->getCondition());
@@ -89,7 +89,7 @@
 
     public function testConditionWithNumbers(): void
     {
-        $route = $this->router->get('/score', fn(): string => 'score')
+        $route = $this->router->get('/score', fn (): string => 'score')
             ->condition('score >= 100 and score <= 1000');
 
         $this->assertEquals('score >= 100 and score <= 1000', $route->getCondition());
@@ -98,7 +98,7 @@
     public function testConditionReturnedByGetter(): void
     {
         $condition = 'user.age > 18 and user.verified';
-        $route = $this->router->get('/test', fn(): string => 'test')
+        $route = $this->router->get('/test', fn (): string => 'test')
             ->condition($condition);
 
         $this->assertEquals($condition, $route->getCondition());

      ----------- end diff -----------

  10) tests/Unit/CorsMiddlewareTest.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/CorsMiddlewareTest.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/CorsMiddlewareTest.php
@@ -25,6 +25,7 @@
         $called = false;
         $middleware->handle('/test', function () use (&$called): string {
             $called = true;
+
             return 'response';
         });
 
@@ -43,6 +44,7 @@
         $called = false;
         $middleware->handle('/test', function () use (&$called): string {
             $called = true;
+
             return 'response';
         });
 
@@ -61,6 +63,7 @@
         $called = false;
         $middleware->handle('/test', function () use (&$called): string {
             $called = true;
+
             return 'response';
         });
 
@@ -81,7 +84,7 @@
         $this->expectOutputString('');
 
         try {
-            $middleware->handle('/test', fn(): string => 'should not reach here');
+            $middleware->handle('/test', fn (): string => 'should not reach here');
         } catch (\Exception) {
             // Expected exit() call
         }
@@ -97,7 +100,7 @@
         $_SERVER['HTTP_ORIGIN'] = 'https://example.com';
         $_SERVER['REQUEST_METHOD'] = 'GET';
 
-        $middleware->handle('/test', fn(): string => 'response');
+        $middleware->handle('/test', fn (): string => 'response');
 
         // Credentials header should be set
         $this->assertTrue(true); // Headers are set via header() function
@@ -112,7 +115,7 @@
         $_SERVER['HTTP_ORIGIN'] = 'https://example.com';
         $_SERVER['REQUEST_METHOD'] = 'GET';
 
-        $middleware->handle('/test', fn(): string => 'response');
+        $middleware->handle('/test', fn (): string => 'response');
 
         $this->assertTrue(true);
     }
@@ -127,6 +130,7 @@
         $called = false;
         $middleware->handle('/test', function () use (&$called): string {
             $called = true;
+
             return 'response';
         });
 
@@ -145,6 +149,7 @@
         $called = false;
         $middleware->handle('/test', function () use (&$called): string {
             $called = true;
+
             return 'response';
         });
 
@@ -170,6 +175,7 @@
         $called = false;
         $middleware->handle('/test', function () use (&$called): string {
             $called = true;
+
             return 'response';
         });
 

      ----------- end diff -----------

  11) tests/Unit/RouteDefaultsTest.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/RouteDefaultsTest.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/RouteDefaultsTest.php
@@ -18,7 +18,7 @@
 
     public function testSetSingleDefault(): void
     {
-        $route = $this->router->get('/page/{num}', fn($num): string => 'Page ' . $num)
+        $route = $this->router->get('/page/{num}', fn ($num): string => 'Page ' . $num)
             ->default('num', 1);
 
         $this->assertEquals(['num' => 1], $route->getDefaults());
@@ -26,7 +26,7 @@
 
     public function testSetMultipleDefaultsIndividually(): void
     {
-        $route = $this->router->get('/archive/{year}/{month}', fn($y, $m): string => "Archive")
+        $route = $this->router->get('/archive/{year}/{month}', fn ($y, $m): string => 'Archive')
             ->default('year', 2025)
             ->default('month', 1);
 
@@ -35,7 +35,7 @@
 
     public function testSetMultipleDefaultsAtOnce(): void
     {
-        $route = $this->router->get('/archive/{year}/{month}', fn($y, $m): string => "Archive")
+        $route = $this->router->get('/archive/{year}/{month}', fn ($y, $m): string => 'Archive')
             ->defaults(['year' => 2025, 'month' => 1]);
 
         $this->assertEquals(['year' => 2025, 'month' => 1], $route->getDefaults());
@@ -43,7 +43,7 @@
 
     public function testDefaultsAreMerged(): void
     {
-        $route = $this->router->get('/test/{a}/{b}/{c}', fn(): string => 'test')
+        $route = $this->router->get('/test/{a}/{b}/{c}', fn (): string => 'test')
             ->defaults(['a' => 1, 'b' => 2])
             ->defaults(['c' => 3]);
 
@@ -52,7 +52,7 @@
 
     public function testDefaultsOverride(): void
     {
-        $route = $this->router->get('/test/{num}', fn(): string => 'test')
+        $route = $this->router->get('/test/{num}', fn (): string => 'test')
             ->default('num', 1)
             ->default('num', 2);
 
@@ -61,7 +61,7 @@
 
     public function testDefaultValueTypes(): void
     {
-        $route = $this->router->get('/test/{str}/{int}/{bool}/{null}', fn(): string => 'test')
+        $route = $this->router->get('/test/{str}/{int}/{bool}/{null}', fn (): string => 'test')
             ->defaults([
                 'str' => 'string',
                 'int' => 42,
@@ -78,7 +78,7 @@
 
     public function testDefaultsAppliedDuringMatching(): void
     {
-        $this->router->get('/page/{num}', fn($num): string => 'Page ' . $num)
+        $this->router->get('/page/{num}', fn ($num): string => 'Page ' . $num)
             ->name('page')
             ->default('num', 1);
 
@@ -96,7 +96,7 @@
 
     public function testEmptyDefaults(): void
     {
-        $route = $this->router->get('/test', fn(): string => 'test');
+        $route = $this->router->get('/test', fn (): string => 'test');
 
         $this->assertEquals([], $route->getDefaults());
     }
@@ -103,7 +103,7 @@
 
     public function testDefaultsFluentInterface(): void
     {
-        $route = $this->router->get('/test/{a}', fn(): string => 'test')
+        $route = $this->router->get('/test/{a}', fn (): string => 'test')
             ->default('a', 1)
             ->name('test')
             ->middleware(['auth']);

      ----------- end diff -----------

  12) tests/Unit/AuthMiddlewareTest.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/AuthMiddlewareTest.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/AuthMiddlewareTest.php
@@ -26,6 +26,7 @@
         $called = false;
         $middleware->handle('/test', function () use (&$called): string {
             $called = true;
+
             return 'response';
         });
 
@@ -42,6 +43,7 @@
         $called = false;
         $middleware->handle('/test', function () use (&$called): string {
             $called = true;
+
             return 'response';
         });
 
@@ -55,18 +57,19 @@
         $this->expectException(RuntimeException::class);
         $this->expectExceptionMessage('Unauthorized');
 
-        $middleware->handle('/test', fn(): string => 'should not reach here');
+        $middleware->handle('/test', fn (): string => 'should not reach here');
     }
 
     public function testCustomAuthenticator(): void
     {
         $customAuth = new AuthMiddleware(
-            authenticator: fn(): array => ['id' => 1, 'name' => 'Test User', 'roles' => ['user']]
+            authenticator: fn (): array => ['id' => 1, 'name' => 'Test User', 'roles' => ['user']]
         );
 
         $called = false;
         $customAuth->handle('/test', function () use (&$called): string {
             $called = true;
+
             return 'response';
         });
 
@@ -76,13 +79,13 @@
     public function testCustomAuthenticatorReturnsNull(): void
     {
         $customAuth = new AuthMiddleware(
-            authenticator: fn(): ?array => null
+            authenticator: fn (): ?array => null
         );
 
         $this->expectException(RuntimeException::class);
         $this->expectExceptionMessage('Unauthorized');
 
-        $customAuth->handle('/test', fn(): string => 'should not reach here');
+        $customAuth->handle('/test', fn (): string => 'should not reach here');
     }
 
     public function testRoleBasedAccess(): void
@@ -96,6 +99,7 @@
         $called = false;
         $middleware->handle('/test', function () use (&$called): string {
             $called = true;
+
             return 'response';
         });
 
@@ -113,7 +117,7 @@
         $this->expectException(RuntimeException::class);
         $this->expectExceptionMessage('Forbidden');
 
-        $middleware->handle('/test', fn(): string => 'should not reach here');
+        $middleware->handle('/test', fn (): string => 'should not reach here');
     }
 
     public function testMultipleAllowedRoles(): void
@@ -128,6 +132,7 @@
         $called = false;
         $middleware->handle('/test', function () use (&$called): string {
             $called = true;
+
             return 'response';
         });
 
@@ -145,6 +150,7 @@
         $called = false;
         $middleware->handle('/test', function () use (&$called): string {
             $called = true;
+
             return 'response';
         });
 
@@ -154,7 +160,7 @@
     public function testUserWithoutRoles(): void
     {
         $customAuth = new AuthMiddleware(
-            authenticator: fn(): array => ['id' => 1, 'name' => 'User'],
+            authenticator: fn (): array => ['id' => 1, 'name' => 'User'],
             allowedRoles: ['admin']
         );
 
@@ -161,6 +167,6 @@
         $this->expectException(RuntimeException::class);
         $this->expectExceptionMessage('Forbidden');
 
-        $customAuth->handle('/test', fn(): string => 'should not reach here');
+        $customAuth->handle('/test', fn (): string => 'should not reach here');
     }
 }

      ----------- end diff -----------

  13) tests/Unit/UrlGeneratorTest.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/UrlGeneratorTest.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/UrlGeneratorTest.php
@@ -21,10 +21,10 @@
         $this->generator = new UrlGenerator($this->router);
 
         // Add test routes
-        $this->router->get('/', fn(): string => 'home')->name('home');
-        $this->router->get('/users', fn(): string => 'users')->name('users.index');
-        $this->router->get('/users/{id}', fn($id): string => 'user ' . $id)->name('users.show');
-        $this->router->get('/posts/{year}/{month}/{slug}', fn($y, $m, $s): string => 'post')
+        $this->router->get('/', fn (): string => 'home')->name('home');
+        $this->router->get('/users', fn (): string => 'users')->name('users.index');
+        $this->router->get('/users/{id}', fn ($id): string => 'user ' . $id)->name('users.show');
+        $this->router->get('/posts/{year}/{month}/{slug}', fn ($y, $m, $s): string => 'post')
             ->name('posts.show');
     }
 

      ----------- end diff -----------

  14) tests/Unit/RouteDumperTest.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/RouteDumperTest.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/RouteDumperTest.php
@@ -4,8 +4,8 @@
 
 namespace CloudCastle\Http\Router\Tests\Unit;
 
+use CloudCastle\Http\Router\RouteDumper;
 use CloudCastle\Http\Router\Router;
-use CloudCastle\Http\Router\RouteDumper;
 use PHPUnit\Framework\TestCase;
 
 class RouteDumperTest extends TestCase
@@ -20,10 +20,10 @@
         $this->dumper = new RouteDumper($this->router);
 
         // Add test routes
-        $this->router->get('/', fn(): string => 'home')->name('home');
-        $this->router->get('/users', fn(): string => 'users')->name('users.index');
-        $this->router->post('/users', fn(): string => 'create')->name('users.store');
-        $this->router->get('/users/{id}', fn($id): string => 'user ' . $id)->name('users.show')
+        $this->router->get('/', fn (): string => 'home')->name('home');
+        $this->router->get('/users', fn (): string => 'users')->name('users.index');
+        $this->router->post('/users', fn (): string => 'create')->name('users.store');
+        $this->router->get('/users/{id}', fn ($id): string => 'user ' . $id)->name('users.show')
             ->middleware(['auth'])
             ->default('id', 1);
     }
@@ -81,7 +81,7 @@
     public function testDumpIncludesMiddleware(): void
     {
         $dump = $this->dumper->dump();
-        $userShowRoute = array_values(array_filter($dump, fn($r): bool => $r['name'] === 'users.show'))[0];
+        $userShowRoute = array_values(array_filter($dump, fn ($r): bool => $r['name'] === 'users.show'))[0];
 
         $this->assertNotEmpty($userShowRoute['middleware']);
         $this->assertTrue(in_array('auth', $userShowRoute['middleware'], true));
@@ -90,7 +90,7 @@
     public function testDumpIncludesDefaults(): void
     {
         $dump = $this->dumper->dump();
-        $userShowRoute = array_values(array_filter($dump, fn($r): bool => $r['name'] === 'users.show'))[0];
+        $userShowRoute = array_values(array_filter($dump, fn ($r): bool => $r['name'] === 'users.show'))[0];
 
         $this->assertArrayHasKey('defaults', $userShowRoute);
         $this->assertEquals(['id' => 1], $userShowRoute['defaults']);
@@ -108,7 +108,7 @@
     {
         $this->router->get('/test', ['TestController', 'index'])->name('test');
         $dump = $this->dumper->dump();
-        $testRoute = array_values(array_filter($dump, fn($r): bool => $r['name'] === 'test'))[0];
+        $testRoute = array_values(array_filter($dump, fn ($r): bool => $r['name'] === 'test'))[0];
 
         $action = is_string($testRoute['action']) ? $testRoute['action'] : '';
         $this->assertStringContainsString('TestController@index', $action);
@@ -118,7 +118,7 @@
     {
         $this->router->get('/string', 'StringController@action')->name('string');
         $dump = $this->dumper->dump();
-        $stringRoute = array_values(array_filter($dump, fn($r): bool => $r['name'] === 'string'))[0];
+        $stringRoute = array_values(array_filter($dump, fn ($r): bool => $r['name'] === 'string'))[0];
 
         $this->assertEquals('StringController@action', $stringRoute['action']);
     }

      ----------- end diff -----------

  15) tests/Unit/XmlLoaderTest.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/XmlLoaderTest.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/XmlLoaderTest.php
@@ -34,11 +34,11 @@
     public function testLoadSimpleRoute(): void
     {
         $xml = <<<XML
-<?xml version="1.0" encoding="UTF-8"?>
-<routes>
-    <route path="/" name="home" methods="GET" controller="HomeController::index"/>
-</routes>
-XML;
+            <?xml version="1.0" encoding="UTF-8"?>
+            <routes>
+                <route path="/" name="home" methods="GET" controller="HomeController::index"/>
+            </routes>
+            XML;
 
         file_put_contents($this->tempFile, $xml);
         $this->loader->load($this->tempFile);
@@ -53,11 +53,11 @@
     public function testLoadRouteWithMultipleMethods(): void
     {
         $xml = <<<XML
-<?xml version="1.0" encoding="UTF-8"?>
-<routes>
-    <route path="/users" name="users" methods="GET,POST,PUT" controller="UserController::handle"/>
-</routes>
-XML;
+            <?xml version="1.0" encoding="UTF-8"?>
+            <routes>
+                <route path="/users" name="users" methods="GET,POST,PUT" controller="UserController::handle"/>
+            </routes>
+            XML;
 
         file_put_contents($this->tempFile, $xml);
         $this->loader->load($this->tempFile);
@@ -70,13 +70,13 @@
     public function testLoadRouteWithMiddleware(): void
     {
         $xml = <<<XML
-<?xml version="1.0" encoding="UTF-8"?>
-<routes>
-    <route path="/admin" name="admin" methods="GET" controller="AdminController::index">
-        <middleware>auth,admin</middleware>
-    </route>
-</routes>
-XML;
+            <?xml version="1.0" encoding="UTF-8"?>
+            <routes>
+                <route path="/admin" name="admin" methods="GET" controller="AdminController::index">
+                    <middleware>auth,admin</middleware>
+                </route>
+            </routes>
+            XML;
 
         file_put_contents($this->tempFile, $xml);
         $this->loader->load($this->tempFile);
@@ -89,15 +89,15 @@
     public function testLoadRouteWithDefaults(): void
     {
         $xml = <<<XML
-<?xml version="1.0" encoding="UTF-8"?>
-<routes>
-    <route path="/page/{num}" name="page" methods="GET" controller="PageController::show">
-        <defaults>
-            <default param="num" value="1"/>
-        </defaults>
-    </route>
-</routes>
-XML;
+            <?xml version="1.0" encoding="UTF-8"?>
+            <routes>
+                <route path="/page/{num}" name="page" methods="GET" controller="PageController::show">
+                    <defaults>
+                        <default param="num" value="1"/>
+                    </defaults>
+                </route>
+            </routes>
+            XML;
 
         file_put_contents($this->tempFile, $xml);
         $this->loader->load($this->tempFile);
@@ -110,15 +110,15 @@
     public function testLoadRouteWithRequirements(): void
     {
         $xml = <<<XML
-<?xml version="1.0" encoding="UTF-8"?>
-<routes>
-    <route path="/user/{id}" name="user" methods="GET" controller="UserController::show">
-        <requirements>
-            <requirement param="id" pattern="\d+"/>
-        </requirements>
-    </route>
-</routes>
-XML;
+            <?xml version="1.0" encoding="UTF-8"?>
+            <routes>
+                <route path="/user/{id}" name="user" methods="GET" controller="UserController::show">
+                    <requirements>
+                        <requirement param="id" pattern="\d+"/>
+                    </requirements>
+                </route>
+            </routes>
+            XML;
 
         file_put_contents($this->tempFile, $xml);
         $this->loader->load($this->tempFile);
@@ -130,11 +130,11 @@
     public function testLoadRouteWithDomain(): void
     {
         $xml = <<<XML
-<?xml version="1.0" encoding="UTF-8"?>
-<routes>
-    <route path="/api" name="api" methods="GET" controller="ApiController::index" domain="api.example.com"/>
-</routes>
-XML;
+            <?xml version="1.0" encoding="UTF-8"?>
+            <routes>
+                <route path="/api" name="api" methods="GET" controller="ApiController::index" domain="api.example.com"/>
+            </routes>
+            XML;
 
         file_put_contents($this->tempFile, $xml);
         $this->loader->load($this->tempFile);
@@ -147,13 +147,13 @@
     public function testLoadMultipleRoutes(): void
     {
         $xml = <<<XML
-<?xml version="1.0" encoding="UTF-8"?>
-<routes>
-    <route path="/" name="home" methods="GET" controller="HomeController::index"/>
-    <route path="/about" name="about" methods="GET" controller="AboutController::index"/>
-    <route path="/contact" name="contact" methods="GET,POST" controller="ContactController::handle"/>
-</routes>
-XML;
+            <?xml version="1.0" encoding="UTF-8"?>
+            <routes>
+                <route path="/" name="home" methods="GET" controller="HomeController::index"/>
+                <route path="/about" name="about" methods="GET" controller="AboutController::index"/>
+                <route path="/contact" name="contact" methods="GET,POST" controller="ContactController::handle"/>
+            </routes>
+            XML;
 
         file_put_contents($this->tempFile, $xml);
         $this->loader->load($this->tempFile);
@@ -183,11 +183,11 @@
     public function testLoadMissingPath(): void
     {
         $xml = <<<XML
-<?xml version="1.0" encoding="UTF-8"?>
-<routes>
-    <route name="invalid" methods="GET" controller="Controller::index"/>
-</routes>
-XML;
+            <?xml version="1.0" encoding="UTF-8"?>
+            <routes>
+                <route name="invalid" methods="GET" controller="Controller::index"/>
+            </routes>
+            XML;
 
         file_put_contents($this->tempFile, $xml);
 

      ----------- end diff -----------

  16) tests/Unit/UrlMatcherTest.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/UrlMatcherTest.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/UrlMatcherTest.php
@@ -21,11 +21,11 @@
         $this->matcher = new UrlMatcher($this->router);
 
         // Add test routes
-        $this->router->get('/', fn(): string => 'home')->name('home');
-        $this->router->get('/users', fn(): string => 'users')->name('users.index');
-        $this->router->get('/users/{id}', fn($id): string => 'user ' . $id)->name('users.show');
-        $this->router->post('/users', fn(): string => 'create')->name('users.store');
-        $this->router->get('/posts/{year}/{month}/{slug}', fn($y, $m, $s): string => 'post')
+        $this->router->get('/', fn (): string => 'home')->name('home');
+        $this->router->get('/users', fn (): string => 'users')->name('users.index');
+        $this->router->get('/users/{id}', fn ($id): string => 'user ' . $id)->name('users.show');
+        $this->router->post('/users', fn (): string => 'create')->name('users.store');
+        $this->router->get('/posts/{year}/{month}/{slug}', fn ($y, $m, $s): string => 'post')
             ->name('posts.show');
     }
 

      ----------- end diff -----------

  17) tests/Unit/AttributeLoaderTest.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/AttributeLoaderTest.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/AttributeLoaderTest.php
@@ -121,7 +121,7 @@
 
         $routes = array_filter(
             $this->router->getAllRoutes(),
-            fn($r): bool => $r->getDomain() === 'api.example.com'
+            fn ($r): bool => $r->getDomain() === 'api.example.com'
         );
 
         $this->assertCount(1, $routes);
@@ -133,7 +133,7 @@
 
         $routes = array_filter(
             $this->router->getAllRoutes(),
-            fn($r): bool => in_array($r->getUri(), ['/user/{id}', '/profile/{id}'], true)
+            fn ($r): bool => in_array($r->getUri(), ['/user/{id}', '/profile/{id}'], true)
         );
 
         $this->assertCount(2, $routes);

      ----------- end diff -----------

  18) tests/Unit/YamlLoaderTest.php
      ---------- begin diff ----------
--- /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/YamlLoaderTest.php
+++ /home/alexey/Документы/Projects/Cursor/HttpRouter/tests/Unit/YamlLoaderTest.php
@@ -38,11 +38,11 @@
         }
 
         $yaml = <<<YAML
-home:
-  path: /
-  methods: GET
-  controller: HomeController::index
-YAML;
+            home:
+              path: /
+              methods: GET
+              controller: HomeController::index
+            YAML;
 
         file_put_contents($this->tempFile, $yaml);
         $this->loader->load($this->tempFile);
@@ -61,11 +61,11 @@
         }
 
         $yaml = <<<YAML
-users:
-  path: /users/{id}
-  methods: [GET, POST, PUT]
-  controller: UserController::handle
-YAML;
+            users:
+              path: /users/{id}
+              methods: [GET, POST, PUT]
+              controller: UserController::handle
+            YAML;
 
         file_put_contents($this->tempFile, $yaml);
         $this->loader->load($this->tempFile);
@@ -82,12 +82,12 @@
         }
 
         $yaml = <<<YAML
-protected:
-  path: /admin
-  methods: GET
-  controller: AdminController::index
-  middleware: auth
-YAML;
+            protected:
+              path: /admin
+              methods: GET
+              controller: AdminController::index
+              middleware: auth
+            YAML;
 
         file_put_contents($this->tempFile, $yaml);
         $this->loader->load($this->tempFile);
@@ -104,13 +104,13 @@
         }
 
         $yaml = <<<YAML
-page:
-  path: /page/{num}
-  methods: GET
-  controller: PageController::show
-  defaults:
-    num: 1
-YAML;
+            page:
+              path: /page/{num}
+              methods: GET
+              controller: PageController::show
+              defaults:
+                num: 1
+            YAML;
 
         file_put_contents($this->tempFile, $yaml);
         $this->loader->load($this->tempFile);
@@ -127,13 +127,13 @@
         }
 
         $yaml = <<<YAML
-user:
-  path: /user/{id}
-  methods: GET
-  controller: UserController::show
-  requirements:
-    id: \d+
-YAML;
+            user:
+              path: /user/{id}
+              methods: GET
+              controller: UserController::show
+              requirements:
+                id: \d+
+            YAML;
 
         file_put_contents($this->tempFile, $yaml);
         $this->loader->load($this->tempFile);
@@ -149,12 +149,12 @@
         }
 
         $yaml = <<<YAML
-api:
-  path: /api
-  methods: GET
-  controller: ApiController::index
-  domain: api.example.com
-YAML;
+            api:
+              path: /api
+              methods: GET
+              controller: ApiController::index
+              domain: api.example.com
+            YAML;
 
         file_put_contents($this->tempFile, $yaml);
         $this->loader->load($this->tempFile);
@@ -171,14 +171,14 @@
         }
 
         $yaml = <<<YAML
-limited:
-  path: /limited
-  methods: POST
-  controller: LimitedController::handle
-  throttle:
-    max: 10
-    decay: 60
-YAML;
+            limited:
+              path: /limited
+              methods: POST
+              controller: LimitedController::handle
+              throttle:
+                max: 10
+                decay: 60
+            YAML;
 
         file_put_contents($this->tempFile, $yaml);
         $this->loader->load($this->tempFile);
@@ -202,10 +202,10 @@
         }
 
         $yaml = <<<YAML
-invalid:
-  methods: GET
-  controller: Controller::index
-YAML;
+            invalid:
+              methods: GET
+              controller: Controller::index
+            YAML;
 
         file_put_contents($this->tempFile, $yaml);
 

      ----------- end diff -----------


Found 18 of 86 files that can be fixed in 2.167 seconds, 20.00 MB memory used
Script php-cs-fixer fix --dry-run --diff handling the php-cs-fixer event returned with error code 8
Script @php-cs-fixer was called via analyse
Script @analyse was called via test:all
